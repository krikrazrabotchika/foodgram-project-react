name: Foodgram workflow

on: [push]

jobs:
  flake8_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: flake8 tests
        run: python -m flake8

  build_backend_and_push_to_docker_hub:
    name: push Docker image for backend to Docker Hub
    runs-on: ubuntu-latest
    needs: flake8_tests
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fgback:v2.13

  build_frontend_and_push_to_docker_hub:
    name: push Docker image for frontend to Docker Hub
    runs-on: ubuntu-latest
    needs: build_backend_and_push_to_docker_hub
    steps:
      - name: check out the repo
        uses: actions/checkout@v2
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: push frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fgfront:v2.13


  make_env:
    runs-on: ubuntu-latest
    needs: build_frontend_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v2
      - name: install dump-env and make env
        env:
          SECRET_DB_ENGINE: ${{ secrets.DB_ENGINE }}
          SECRET_DB_NAME: ${{ secrets.DB_NAME }}
          SECRET_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          SECRET_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SECRET_DB_HOST: ${{ secrets.DB_HOST }}
          SECRET_DB_PORT: ${{ secrets.DB_PORT }}
          SECRET_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          pip install dump-env
          dump-env -t infra/.env.template -p 'SECRET_' > .env
      - name: copy env file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: '.env'
          target: '.'

  deploy:
    runs-on: ubuntu-latest
    needs: make_env
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker compose stop
            sudo docker compose rm web -f
            sudo docker compose rm frontend -f
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/fgfront
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/fgback
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fgback:v2.13
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/fgfront:v2.13
            sudo docker compose up -d 

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} succsefully done!